version: '3.2'
services:
  es01:
    image: amazon/opendistro-for-elasticsearch:1.12.0
    container_name: es01
    environment:
      - node.name=es01
      - discovery.type=single-node
      - cluster.name=es-docker-cluster
      # - discovery.seed_hosts=es02,es03
      # - cluster.initial_master_nodes=es01
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - /tmp/elasticsearch/data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9600:9600 # perf analyzer
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.0
    volumes:
      - "./logstash/logstash.yaml:/usr/share/logstash/config/logstash.yml:ro"
      - "./logstash/pipeline:/usr/share/logstash/pipeline:ro"
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600"
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
      ELASTICSEARCH_HOSTS: '["https://es01:9200"]'
    depends_on:
      - es01
    networks:
      - elk

  kibana:
    image: amazon/opendistro-for-elasticsearch-kibana:1.12.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["https://es01:9200"]'
    depends_on:
      - es01
    networks:
      - elk

  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - elk

  kafka:
    image: confluentinc/cp-kafka:5.4.0
    depends_on:
      - zookeeper
    ports:
      - 9092
    expose:
      - 9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - elk

  schema-registry:
    image: confluentinc/cp-schema-registry:5.0.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - elk

  connect:
    image: cnfldemos/kafka-connect-datagen:0.4.0-6.0.1
    container_name: connect
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper
      - kafka
    environment:
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KAFKA_TOPIC: "customer_data"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose_datagen_connect_group
      CONNECT_QUICKSTART: "users"
      CONNECT_CONFIG_STORAGE_TOPIC: docker_datagen_connect_configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker_datagen_connect_offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker_datagen_connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
    networks:
      - elk

  primary-ksqldb-server:
    image: confluentinc/ksqldb-server:0.14.0
    hostname: primary-ksqldb-server
    container_name: primary-ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
    networks:
      - elk

  # Access the cli by running:
  # > docker-compose exec ksqldb-cli  ksql http://primary-ksqldb-server:8088
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.14.0
    container_name: ksqldb-cli
    depends_on:
      - primary-ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - elk

  kafka-cat:
    image: confluentinc/cp-kafkacat:5.4.0
    depends_on:
      - zookeeper
      - kafka
    networks:
      - elk

networks:
  elk:
    driver: bridge
